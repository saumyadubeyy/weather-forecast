{"version":3,"sources":["Weather.js","App.js","index.js"],"names":["Weather","useState","search","setSearch","data","setData","unit","setUnit","cityName","setCityName","weather","setWeather","sys","setSys","err","setErr","showUnit","setShowUnit","fetchData","e","a","preventDefault","url","process","fetch","response","json","name","main","console","log","time_sunrise","Date","sunrise","toLocaleTimeString","timeZone","hour12","hour","minute","time_sunset","sunset","date","moment","format","time","className","onSubmit","type","placeholder","maxLength","style","textTransform","onChange","target","value","checked","src","icon","alt","description","temp","feels_like","temp_min","temp_max","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAiIeA,EA3HC,WAEZ,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,YAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,mBAAS,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAsBV,mBAAS,IAA/B,mBAAOW,EAAP,KAAYC,EAAZ,KACA,EAAoBZ,oBAAS,GAA7B,mBAAKa,EAAL,KAAUC,EAAV,KACA,EAA8Bd,mBAAS,IAAvC,mBAAKe,EAAL,KAAeC,EAAf,KAEMC,EAAS,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACdD,EAAEE,iBADY,SAGJC,EAHI,4DAGuDpB,EAHvD,kBAGuEI,EAHvE,kBAbNiB,oCAaM,SAIaC,MAAMF,GAJnB,cAIJG,EAJI,gBAKSA,EAASC,OALlB,OAKJtB,EALI,OAMVK,EAAYL,EAAKuB,MACjBhB,EAAWP,EAAKM,QAAQ,IACxBG,EAAOT,EAAKQ,KACZP,EAAQD,EAAKwB,MAITb,GAHAP,GAMAS,EADM,aAAPX,EACa,IAEA,KAlBN,kDAqBVuB,QAAQC,IAAR,MArBU,0DAAH,sDA0BTC,EADU,IAAIC,KAAkB,IAAbpB,EAAIqB,SACCC,mBAAmB,GAC7C,CAACC,SAAS,eAAeC,QAAO,EAAKC,KAAK,UAAUC,OAAO,YAIzDC,EADS,IAAIP,KAAiB,IAAZpB,EAAI4B,QACAN,mBAAmB,GAC3C,CAACC,SAAS,eAAeC,QAAO,EAAKC,KAAK,UAAUC,OAAO,YAIzDG,EAAOC,IAAO,IAAIV,MAAQW,OAAO,gBACjCC,EAAOF,MAASC,OAAO,UAG7B,OACI,sBAAKE,UAAU,OAAf,UACI,kDACA,uBAAMC,SAAU5B,EAAhB,UACI,8BACI,uBACI6B,KAAK,SACLC,YAAY,aACZC,UAAU,KACVC,MAAO,CAACC,cAAe,cACvBC,SAAU,SAACjC,GAAD,OAAMhB,EAAUgB,EAAEkC,OAAOC,YAG3C,wBAAOT,UAAU,QAAjB,UACI,uBACIE,KAAK,QACLpB,KAAK,QACL4B,QAAkB,aAATjD,EACTgD,MAAM,WACNF,SAAU,SAACjC,GAAD,OAAOZ,EAAQY,EAAEkC,OAAOC,UAN1C,iBASA,wBAAOT,UAAU,QAAjB,UACI,uBACIE,KAAK,QACLpB,KAAK,QACL4B,QAAkB,WAATjD,EACTgD,MAAM,SACNF,SAAU,SAACjC,GAAD,OAAOZ,EAAQY,EAAEkC,OAAOC,UAN1C,aAUI,wBAAQP,KAAK,SAASF,UAAU,MAAhC,6BAGCrC,EAGG,qBAAIqC,UAAU,OAAd,UAAsBJ,EAAtB,KAA8BG,KAF9B,oBAAIC,UAAY/B,EAAK,QAAU,UAA/B,4CAKZ,qBAAK+B,UAAU,OAAf,SAEKrC,EAIG,sBAAKqC,UAAU,iBAAf,UACI,oBAAIA,UAAU,UAAd,SAAyBrC,IACzB,sBAAKqC,UAAU,OAAf,UAEI,qBAAKW,IAAG,0CAAqC9C,EAAQ+C,KAA7C,QAAyDC,IAAI,SACrE,oBAAIb,UAAU,cAAcK,MAAO,CAACC,cAAe,cAAnD,SAAmEzC,EAAQiD,iBAE/E,sBAAKd,UAAU,OAAf,UACI,qBAAIA,UAAU,kBAAd,UAAiCzC,EAAKwD,KAAtC,QAA8C5C,KAC9C,qBAAI6B,UAAU,cAAd,wBAAwCzC,EAAKyD,WAA7C,QAA2D7C,QAE/D,qBAAK6B,UAAU,SAAf,SACI,qBAAIA,UAAU,SAAd,8BAAyCzC,EAAK0D,SAA9C,QAA0D9C,EAA1D,wBAAyFZ,EAAK2D,SAA9F,QAA0G/C,OAE9G,8BACI,qBAAI6B,UAAU,SAAd,sBAAiCd,EAAjC,eAA2DQ,UAlBnE,wECxFLyB,EARH,WACV,OACE,qBAAKnB,UAAU,YAAf,SACE,cAAC,EAAD,OCJNoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e93f5358.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport moment from 'moment'\r\nimport './Weather.css'\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY\r\n\r\nconst Weather = () => {\r\n\r\n    const [search, setSearch] = useState('')\r\n    const [data, setData] = useState('')\r\n    const [unit, setUnit] = useState('imperial')\r\n    const [cityName, setCityName] = useState('')\r\n    const [weather, setWeather] = useState('')\r\n    const [sys, setSys] = useState('')\r\n    let [err, setErr] = useState(false)\r\n    let [showUnit, setShowUnit] = useState('')\r\n\r\n    const fetchData = async (e) => {\r\n        e.preventDefault();\r\n        try{\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=${unit}&appid=${API_KEY}`\r\n            const response = await fetch(url)\r\n            const data = await response.json()\r\n            setCityName(data.name)\r\n            setWeather(data.weather[0])\r\n            setSys(data.sys)\r\n            setData(data.main)  \r\n            if(!cityName){\r\n                setErr(true)\r\n            } else{\r\n                setErr(false)\r\n            }\r\n            if(unit===\"imperial\"){\r\n                setShowUnit(\"F\")\r\n            } else{\r\n                setShowUnit(\"C\")\r\n            }\r\n        } catch(error){\r\n            console.log(error)\r\n        }            \r\n    }\r\n\r\n    const sunrise = new Date(sys.sunrise *1000) ;\r\n    const time_sunrise =  sunrise.toLocaleTimeString({},\r\n        {timeZone:'Asia/Kolkata',hour12:true,hour:'numeric',minute:'numeric'}\r\n      );\r\n    \r\n    const sunset = new Date(sys.sunset *1000) ;\r\n    const time_sunset =  sunset.toLocaleTimeString({},\r\n        {timeZone:'Asia/Kolkata',hour12:true,hour:'numeric',minute:'numeric'}\r\n      );\r\n\r\n    \r\n    const date = moment(new Date()).format('DD MMMM YYYY')\r\n    const time = moment().format(\"h:mm A\")\r\n    \r\n\r\n    return (\r\n        <div className=\"main\">  \r\n            <h2>Weather Forecast</h2>        \r\n            <form onSubmit={fetchData}>\r\n                <div>\r\n                    <input \r\n                        type=\"search\"\r\n                        placeholder=\"Enter City\"\r\n                        maxLength=\"20\"\r\n                        style={{textTransform: 'capitalize'}}\r\n                        onChange={(e) =>setSearch(e.target.value) }\r\n                    />\r\n                </div>\r\n                <label className=\"radio\"> \r\n                    <input \r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"imperial\"}\r\n                        value=\"imperial\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                    /> Fahrenheit\r\n                </label>\r\n                <label className=\"radio\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"metric\"}\r\n                        value=\"metric\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Celcius\r\n                </label>\r\n                    <button type=\"submit\" className=\"btn\">Get Forecast</button>             \r\n            </form>\r\n            {\r\n                    !cityName? (\r\n                        <h4 className= {err? \"blink\" : \"noBlink\"}>Please enter a valid city name</h4>\r\n                    ) : (\r\n                        <h4 className=\"date\">{date}, {time}</h4>\r\n                    )\r\n                } \r\n            <div className=\"data\">\r\n            {\r\n                !cityName? (\r\n                    <h3>Your data will be displayed here</h3>\r\n                ):\r\n                (\r\n                    <div className=\"forecast clear\">\r\n                        <h2 className=\"heading\">{cityName}</h2>\r\n                        <div className=\"icon\" >\r\n                            {/* <img src={`./Images/${weather.icon}.png`} alt=\"icon\"/>  */}\r\n                            <img src={`http://openweathermap.org/img/w/${weather.icon}.png`} alt=\"icon\"/> \r\n                            <h3 className=\"margin size\" style={{textTransform: 'capitalize'}}>{weather.description}</h3>\r\n                        </div>\r\n                        <div className=\"temp\">\r\n                            <h3 className=\"margin mainTemp\">{data.temp} 째{showUnit}</h3>\r\n                            <h4 className=\"margin size\">Feels like {data.feels_like} 째{showUnit}</h4>\r\n                        </div>\r\n                        <div className=\"minmax\">\r\n                            <h4 className=\"margin\">Min temperature: {data.temp_min} 째{showUnit} || Max temperature: {data.temp_max} 째{showUnit}</h4>\r\n                        </div>\r\n                        <div>\r\n                            <h3 className=\"margin\">Sunrise: {time_sunrise} || Sunset: {time_sunset}</h3>\r\n                        </div>             \r\n                    </div>\r\n                )\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import React from 'react'\nimport './App.css'\nimport Weather from './Weather'\n\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Weather />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}